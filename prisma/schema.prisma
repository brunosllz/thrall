generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Answer {
  id            String          @id @default(uuid())
  content       String
  authorId      String
  projectId     String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime?       @updatedAt
  User          User            @relation(fields: [authorId], references: [id])
  project       Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  answerComment AnswerComment[]
}

model AnswerComment {
  id        String    @id @default(uuid())
  content   String
  authorId  String
  answerId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  answer    Answer    @relation(fields: [answerId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [authorId], references: [id])
}

enum NOTIFICATION_TYPE {
  message
  action
  interaction
  info
}

model Notification {
  id                String            @id
  ctaTitle          String[]
  type              NOTIFICATION_TYPE
  linkTo            String
  authorId          String
  recipientId       String
  createdAt         DateTime          @default(now())
  readAt            DateTime?
  title             String
  authorIdToUser    User              @relation("NotificationAuthorIdToUser", fields: [authorId], references: [id])
  recipientIdToUser User              @relation("NotificationRecipientIdToUser", fields: [recipientId], references: [id])
}

enum PROJECT_STATUS {
  draft
  recruiting
  closed
}

enum MEETING_TYPE {
  daily
  weekly
  monthly
}

model InterestedInProject {
  id         String   @id @default(uuid())
  userId     String
  projectId  String
  occurredAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])
}

model Project {
  id                  String         @id @default(uuid())
  authorId            String
  name                String
  description         String
  status              PROJECT_STATUS
  imageUrl            String
  slug                String
  requirements        String
  meetingType         MEETING_TYPE
  meetingDate         String?
  meetingOccurredTime String

  answers             Answer[]
  users               User                  @relation(fields: [authorId], references: [id])
  projectRoles        ProjectRole[]
  teamMembers         TeamMember[]
  technologies        Technology[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime?             @updatedAt
  interestedInProject InterestedInProject[]

  @@unique([authorId, slug])
}

model ProjectRole {
  id            String  @id @default(uuid())
  projectId     String
  roleId        String
  membersAmount Int
  project       Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  role          Role    @relation(fields: [roleId], references: [id])
  users         User[]

  @@unique([projectId, roleId])
}

model Role {
  id           String        @id @default(uuid())
  name         String        @unique
  projectRoles ProjectRole[]
}

model TeamMember {
  id             String                 @id @default(uuid())
  recipientId    String
  permissionType MEMBER_PERMISSION_TYPE
  status         MEMBER_STATUS
  projectId      String
  createdAt      DateTime               @default(now())
  updatedAt      DateTime?
  project        Project                @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user           User                   @relation(fields: [recipientId], references: [id])
}

model Technology {
  id       String    @id @default(uuid())
  slug     String    @unique
  projects Project[]
  users    User[]
}

model User {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  aboutMe      String?
  title        String?
  avatarUrl    String
  city         String?
  state        String?
  country      String?
  linkedinLink String?
  githubLink   String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  profileUrl   String?   @unique
  slugProfile  String    @unique
  role         String?
  seniority    String?
  overallRate  Decimal   @default(0.0) @db.Decimal(5, 2)

  Answer                    Answer[]
  AnswerComment             AnswerComment[]
  authorIdToNotifcation     Notification[]        @relation("NotificationAuthorIdToUser")
  recipientIdToNotification Notification[]        @relation("NotificationRecipientIdToUser")
  projects                  Project[]
  teamMember                TeamMember[]
  projectRole               ProjectRole[]
  technologies              Technology[]
  account                   Account[]
  session                   Session[]
  InterestedInProject       InterestedInProject[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? @db.Text
  accessToken       String? @db.Text
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String? @db.Text
  sessionState      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum MEMBER_PERMISSION_TYPE {
  member
  owner
}

enum MEMBER_STATUS {
  pending
  rejected
  approved
}
