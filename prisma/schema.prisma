generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Answer {
  id        String    @id @default(uuid())
  content   String
  authorId  String    @map("author_id")
  projectId String    @map("project_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  User          User            @relation(fields: [authorId], references: [id])
  project       Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  answerComment AnswerComment[]

  @@map("answers")
}

model AnswerComment {
  id        String    @id @default(uuid())
  content   String
  authorId  String    @map("author_id")
  answerId  String    @map("answer_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  answer Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [authorId], references: [id])

  @@map("answer_comments")
}

enum NOTIFICATION_TYPE {
  message
  action
  interaction
  info
}

model Notification {
  id          String            @id @default(uuid())
  ctaTitle    String[]          @map("cta_title")
  type        NOTIFICATION_TYPE
  linkTo      String            @map("link_to")
  authorId    String            @map("author_id")
  recipientId String            @map("recipient_id")
  createdAt   DateTime          @default(now()) @map("created_at")
  readAt      DateTime?         @map("read_at")
  title       String

  authorIdToUser    User @relation("NotificationAuthorIdToUser", fields: [authorId], references: [id])
  recipientIdToUser User @relation("NotificationRecipientIdToUser", fields: [recipientId], references: [id])

  @@map("notifications")
}

enum INTERESTED_STATUS {
  pending
  rejected
  approved
}

model InterestedInProject {
  id         String            @id @default(uuid())
  userId     String            @map("user_id")
  projectId  String            @map("project_id")
  status     INTERESTED_STATUS @default(pending)
  occurredAt DateTime          @default(now()) @map("occurred_at")

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@map("interested_in_projects")
}

model ProjectRealized {
  id               String @id @default(uuid())
  userId           String @map("user_id")
  projectId        String @map("project_id")
  shortDescription String @map("short_description")

  occurredAt DateTime @default(now()) @map("occurred_at")

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@map("projects_realized")
}

enum PROJECT_STATUS {
  recruiting
  inProgress
  closed
}

enum PROJECT_AVAILABLE_TIME_UNIT {
  hour
  minute
}

model Project {
  id                 String                      @id @default(uuid())
  authorId           String                      @map("author_id")
  name               String
  description        String                      @db.Text
  status             PROJECT_STATUS              @default(recruiting)
  imageUrl           String                      @map("image_url")
  bannerUrl          String?                     @map("banner_url")
  slug               String
  availableDays      Int[]                       @map("available_days")
  availableTimeValue Int                         @map("available_time_value")
  availableTimeUnit  PROJECT_AVAILABLE_TIME_UNIT @map("available_time_unit")
  createdAt          DateTime                    @default(now()) @map("created_at")
  updatedAt          DateTime?                   @updatedAt @map("updated_at")

  answers             Answer[]
  user                User                  @relation(fields: [authorId], references: [id])
  projectRoles        ProjectRole[]
  teamMembers         TeamMember[]
  skills              Skill[]
  interestedInProject InterestedInProject[]
  ProjectRealized     ProjectRealized[]

  @@unique([authorId, slug])
  @@map("projects")
}

model ProjectRole {
  id            String @id @default(uuid())
  description   String @db.Text
  membersAmount Int    @map("members_amount")
  projectId     String @map("project_id")
  roleId        String @map("role_id")

  users   User[]
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  role    Role    @relation(fields: [roleId], references: [id])

  @@unique([projectId, roleId])
  @@map("project_roles")
}

model Role {
  id   String @id @default(uuid())
  name String @unique

  projectRoles ProjectRole[]

  @@map("roles")
}

enum MEMBER_PERMISSION_TYPE {
  member
  owner
}

enum MEMBER_STATUS {
  pending
  rejected
  approved
}

model TeamMember {
  id             String                 @id @default(uuid())
  recipientId    String                 @map("recipient_id")
  permissionType MEMBER_PERMISSION_TYPE @default(member) @map("permission_type")
  status         MEMBER_STATUS          @default(pending)
  projectId      String                 @map("project_id")
  createdAt      DateTime               @default(now()) @map("created_at")
  updatedAt      DateTime?              @updatedAt @map("updated_at")

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [recipientId], references: [id])

  @@map("team_members")
}

model Skill {
  id   String @id @default(uuid())
  slug String @unique

  User     User[]
  projects Project[]

  @@map("skills")
}

model User {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  aboutMe      String?   @map("about_me") @db.Text
  title        String?
  avatarUrl    String    @map("avatar_url")
  city         String?
  state        String?
  country      String?
  linkedinLink String?   @map("linkedin_link")
  githubLink   String?   @map("github_link")
  onboard      DateTime?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")
  profileUrl   String?   @unique @map("profile_url")
  slugProfile  String    @unique @map("slug_profile")
  role         String?
  seniority    String?
  overallRate  Decimal   @default(0.0) @map("overall_rate") @db.Decimal(5, 2)

  Answer                    Answer[]
  AnswerComment             AnswerComment[]
  authorIdToNotifcation     Notification[]        @relation("NotificationAuthorIdToUser")
  recipientIdToNotification Notification[]        @relation("NotificationRecipientIdToUser")
  projects                  Project[]
  teamMember                TeamMember[]
  projectRole               ProjectRole[]
  skills                    Skill[]
  account                   Account[]
  session                   Session[]
  InterestedInProject       InterestedInProject[]
  ProjectRealized           ProjectRealized[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @map("refresh_token") @db.Text
  accessToken       String? @map("access_token") @db.Text
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token") @db.Text
  sessionState      String? @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}
