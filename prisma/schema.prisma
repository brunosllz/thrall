generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String          @id @default(uuid())
  name                  String
  email                 String          @unique
  bio                   String?
  occupation            String?
  avatarUrl             String
  city                  String?
  state                 String?
  country               String?
  linkedinLink          String?
  githubLink            String?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime?       @updatedAt
  userName              String?         @unique
  Account               Account[]
  answers               Answer[]
  answerComments        AnswerComment[]
  sendedNotifications   Notification[]  @relation("Author")
  receivedNotifications Notification[]  @relation("Receiver")
  projects              Project[]
  session               Session[]
  teamMembers           TeamMember[]
  projectRoles          ProjectRole[]   @relation("ProjectRoleToUser")
  technologies          Technology[]    @relation("TechnologyToUser")
}

model Technology {
  id      String    @id @default(uuid())
  slug    String    @unique
  project Project[] @relation("ProjectToTechnology")
  user    User[]    @relation("TechnologyToUser")
}

model TeamMember {
  id             String                 @id @default(uuid())
  recipientId    String
  permissionType MEMBER_PERMISSION_TYPE
  status         MEMBER_STATUS
  projectId      String
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  project        Project                @relation(fields: [projectId], references: [id])
  member         User                   @relation(fields: [recipientId], references: [id])
}

model Role {
  id           String        @id @default(uuid())
  name         String        @unique
  projectRoles ProjectRole[]
}

model ProjectRole {
  id          String  @id @default(uuid())
  projectId   String
  roleId      String
  amount      Int
  project     Project @relation(fields: [projectId], references: [id])
  role        Role    @relation(fields: [roleId], references: [id])
  assigneesId User[]  @relation("ProjectRoleToUser")

  @@unique([projectId, roleId])
}

model Project {
  id                        String          @id @default(uuid())
  authorId                  String
  title                     String
  content                   String
  slug                      String
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime?       @updatedAt
  requirementTimeAmount     Int
  requirementContent        String?
  requirementTimeIdentifier TIME_IDENTIFIER
  answers                   Answer[]
  author                    User            @relation(fields: [authorId], references: [id])
  projectRoles              ProjectRole[]
  teamMembers               TeamMember[]
  technologies              Technology[]    @relation("ProjectToTechnology")

  @@unique([authorId, slug])
}

model Answer {
  id            String          @id @default(uuid())
  content       String
  authorId      String
  projectId     String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime?       @updatedAt
  author        User            @relation(fields: [authorId], references: [id])
  project       Project         @relation(fields: [projectId], references: [id])
  answerComment AnswerComment[]
}

model AnswerComment {
  id        String    @id @default(uuid())
  content   String
  authorId  String
  answerId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  answer    Answer    @relation(fields: [answerId], references: [id])
  author    User      @relation(fields: [authorId], references: [id])
}

model Notification {
  id          String    @id @default(uuid())
  content     String
  authorId    String
  recipientId String
  createdAt   DateTime  @default(now())
  readAt      DateTime?
  title       String
  author      User      @relation("Author", fields: [authorId], references: [id])
  receiver    User      @relation("Receiver", fields: [recipientId], references: [id])
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  scope             String?
  accessToken       String?
  expiresAt         Int?
  idToken           String?
  refreshToken      String?
  sessionState      String?
  tokenType         String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum MEMBER_PERMISSION_TYPE {
  member
  owner
}

enum MEMBER_STATUS {
  pending
  rejected
  approved
}

enum TIME_IDENTIFIER {
  day
  week
  month
}
